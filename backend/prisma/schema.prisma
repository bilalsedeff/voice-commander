// Voice Commander Database Schema
// PostgreSQL schema for web-based voice orchestration platform

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication
model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String // bcrypt hashed
  name      String? // nullable for social auth users
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  oauthTokens   OAuthToken[]
  voiceCommands VoiceCommand[]
  voiceSessions VoiceSession[]
  sessions      Session[]
  mcpConfigs    UserMCPConfig[]

  @@map("users")
}

// OAuth tokens for third-party service integrations
model OAuthToken {
  id           String    @id @default(uuid())
  userId       String
  provider     String // "google", "slack", "notion", "github"
  accessToken  String // AES-256 encrypted
  refreshToken String? // AES-256 encrypted
  expiresAt    DateTime?
  scope        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, provider])
  @@index([userId])
  @@index([provider])
  @@map("oauth_tokens")
}

// Voice command history with conversation context
model VoiceCommand {
  id         String  @id @default(uuid())
  userId     String
  sessionId  String
  transcript String
  intent     String? // Parsed intent from LLM

  // Command execution details
  mcpTool   String?
  mcpParams Json?
  mcpResult Json?

  // Quality metrics
  confidence Float
  riskLevel  String // "safe", "low", "medium", "high"
  success    Boolean
  latency    Int // milliseconds
  error      String?

  // Conversation flow
  requiresClarification Boolean @default(false)
  clarificationQuestion String?
  parentCommandId       String? // Reference to previous command if this is a clarification

  createdAt DateTime @default(now())

  // Relations
  user    User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  session VoiceSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sessionId])
  @@index([createdAt])
  @@index([parentCommandId])
  @@map("voice_commands")
}

// Voice conversation sessions
model VoiceSession {
  id     String @id @default(uuid())
  userId String

  // Session metadata
  startedAt    DateTime  @default(now())
  lastActivity DateTime  @default(now())
  endedAt      DateTime?
  isActive     Boolean   @default(true)

  // Session mode and status
  mode   String @default("continuous") // "continuous" | "push_to_talk"
  status String @default("active") // "active" | "completed" | "timeout"

  // Short-term memory (last 10 interactions)
  contextSummary      String? // LLM-generated summary of conversation
  lastSummarizedTurn  Int?    // Last turn number included in summary

  // Session stats
  commandCount Int @default(0)
  successCount Int @default(0)
  totalTurns   Int @default(0)

  // Relations
  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  commands          VoiceCommand[]
  conversationTurns ConversationTurn[]

  @@index([userId])
  @@index([isActive])
  @@index([status])
  @@index([lastActivity])
  @@map("voice_sessions")
}

// Conversation turns for short-term memory
model ConversationTurn {
  id        String @id @default(uuid())
  sessionId String

  // Turn metadata
  turnNumber Int
  userQuery  String @db.Text

  // AI understanding
  userIntent         String? @db.Text
  assistantResponse  String  @db.Text
  toolResults        Json? // Array of tool execution results

  // Performance metrics
  ttsSpoken  Boolean @default(false)
  durationMs Int?

  createdAt DateTime @default(now())

  // Relations
  session VoiceSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
  @@index([sessionId, turnNumber])
  @@map("conversation_turns")
}

// User sessions for JWT token management
model Session {
  id           String   @id @default(uuid())
  userId       String
  token        String // JWT token hash (not unique - users can have multiple sessions)
  refreshToken String   @unique
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  lastActivity DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@map("sessions")
}

// Service connection status (denormalized for performance)
model ServiceConnection {
  id       String @id @default(uuid())
  userId   String
  provider String // "google", "slack", "notion", "github"

  // OAuth status
  connected Boolean   @default(false)
  lastSync  DateTime?

  // MCP connection status
  mcpConnected       Boolean   @default(false)
  mcpStatus          String    @default("disconnected") // "connecting", "connected", "disconnected", "error"
  mcpSessionId       String?   @db.VarChar(255) // Session ID from MCP server (UUID)
  mcpEndpoint        String?   @db.Text // MCP server URL (e.g., https://mcp.google.com/calendar)
  mcpProtocolVersion String?   @db.VarChar(50) // Protocol version (e.g., "2025-03-26")
  mcpLastHealthCheck DateTime? // Last successful health check (ping)
  mcpError           String?
  mcpToolsCount      Int       @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, provider])
  @@index([userId])
  @@index([mcpStatus])
  @@map("service_connections")
}

// MCP Server marketplace catalog (Smithery, mcpservers.org, etc.)
model MCPServer {
  id          String  @id @default(uuid())
  name        String  @unique // e.g., "@takumi0706/google-calendar-mcp"
  displayName String // e.g., "Google Calendar"
  description String
  category    String // "productivity", "development", "communication", "data", "ai"
  iconUrl     String?

  // MCP Type
  authType String // "oauth" | "api_key" | "none"
  provider String? // "google" | "slack" | "openai" | null (for generic MCPs)

  // Installation info
  transport  String // "stdio" | "http-sse" | "websocket"
  npmPackage String? // e.g., "@takumi0706/google-calendar-mcp"
  command    String // "npx" | "docker" | "node"
  args       Json // ["@takumi0706/google-calendar-mcp"] or custom args

  // OAuth configuration (if authType = "oauth")
  oauthScopes Json? // ["calendar.events", "calendar.readonly"]

  // API Key configuration (if authType = "api_key")
  apiKeyEnvVar String? // e.g., "OPENAI_API_KEY"
  apiKeyLabel  String? // e.g., "OpenAI API Key"

  // Hosted MCP info (if transport = "http-sse")
  hostedUrl String? // e.g., "https://mcp.context7.com/mcp"

  // MCP metadata
  tools         Json // Array of tool definitions (from discovery)
  version       String  @default("1.0.0")
  author        String?
  repository    String? // GitHub repo URL
  documentation String? // Docs URL

  // Stats
  installCount Int    @default(0)
  rating       Float?

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userConfigs UserMCPConfig[]

  @@index([category])
  @@index([authType])
  @@index([provider])
  @@index([isActive])
  @@map("mcp_servers")
}

// User-specific MCP configuration & credentials
model UserMCPConfig {
  id          String @id @default(uuid())
  userId      String
  mcpServerId String

  // Connection status
  status      String  @default("disconnected") // "disconnected" | "connecting" | "connected" | "error"
  processId   String? // Child process PID (development)
  containerId String? // Docker container ID (production)

  // OAuth credentials (encrypted) - if authType = "oauth"
  oauthAccessToken  String? // AES-256 encrypted
  oauthRefreshToken String? // AES-256 encrypted
  oauthExpiresAt    DateTime?

  // API Key (encrypted) - if authType = "api_key"
  apiKey String? // AES-256 encrypted

  // MCP session info
  mcpSessionId    String? // Session ID from MCP server
  lastHealthCheck DateTime?
  toolsDiscovered Json? // Cached tool list
  error           String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  mcpServer MCPServer @relation(fields: [mcpServerId], references: [id], onDelete: Cascade)

  @@unique([userId, mcpServerId])
  @@index([userId])
  @@index([status])
  @@map("user_mcp_configs")
}
